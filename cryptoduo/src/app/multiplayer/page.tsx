"use client";
import { useEffect, useState } from "react";
import NavBar from "../../components/NavBar";
import MultiplayerGame from "../../components/MultiplayerGame";
import { createClient } from "../../utils/supabase/server";

export default function MultiplayerPage() {
  const [user, setUser] = useState<{ id: string; email?: string } | null>(null);
  // Leaderboard state
  const [quizStarted, setQuizStarted] = useState(false);
  const [showLeaderboard, setShowLeaderboard] = useState(false);
  const [leaderboard, setLeaderboard] = useState<{ name: string; score: number; created_at: string; countrycode?: string }[]>([]);
  const [userScore, setUserScore] = useState<{ name: string; score: number; created_at: string; countrycode?: string; rank?: number } | null>(null);

  useEffect(() => {
    const supabase = createClient();
    supabase.auth.getUser().then(({ data }) => {
      if (data.user) {
        setUser({ id: data.user.id, email: data.user.email });
      } else {
        // Check for guest login (firstName in localStorage)
        if (typeof window !== 'undefined') {
          const firstName = localStorage.getItem('firstName');
          if (firstName) {
            setUser({ id: 'guest', email: firstName });
          }
        }
      }
    });
  }, []);

  // Fetch leaderboard (top 10 scores + user's score if not in top 10)
  const fetchLeaderboard = async () => {
    const supabase = createClient();
    const { data: topScores } = await supabase
      .from('leaderboard')
      .select('name, score, created_at, countrycode')
      .order('score', { ascending: false })
      .limit(10);
    setLeaderboard(topScores || []);
    // Fetch user's score and rank if not in top 10
    const name = user?.email || 'Guest';
    if (topScores && !topScores.some(entry => entry.name === name)) {
      // Get user's best score and their rank
      const { data: userEntry } = await supabase
        .from('leaderboard')
        .select('name, score, created_at, countrycode')
        .eq('name', name)
        .order('score', { ascending: false })
        .limit(1)
        .maybeSingle();
      if (userEntry) {
        // Get user's rank
        const { count } = await supabase
          .from('leaderboard')
          .select('*', { count: 'exact', head: true })
          .gt('score', userEntry.score);
        setUserScore({ ...userEntry, rank: (count || 0) + 1 });
      } else {
        setUserScore(null);
      }
    } else {
      setUserScore(null);
    }
    setShowLeaderboard(true);
  };

  // Game end callback for MultiplayerGame
  const handleGameEnd = async () => {
    const name = user?.email || 'Guest';
    const score = Number(localStorage.getItem('mp_points') || '0');
    const countrycode = localStorage.getItem('countryCode') || '';
    // Insert score into Supabase leaderboard table
    const supabase = createClient();
    await supabase.from('leaderboard').insert({ name, score, created_at: new Date().toISOString(), countrycode });
    // Fetch top scores for leaderboard
    await fetchLeaderboard();
  };

  // Poll leaderboard for live updates
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    if (showLeaderboard) {
      fetchLeaderboard();
      interval = setInterval(fetchLeaderboard, 2000);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [showLeaderboard]);

  // Improve score handler
  const handleImproveScore = async () => {
    const supabase = createClient();
    const name = user?.email || 'Guest';
    // Remove old score (delete all for this name)
    await supabase.from('leaderboard').delete().eq('name', name);
    setShowLeaderboard(false);
    setQuizStarted(true);
  };

  // Add a helper to format date and time (date + time)
  function formatDateTime(dateString: string) {
    const date = new Date(dateString);
    return date.toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: '2-digit',
    }) + ' ' + date.toLocaleTimeString(undefined, {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    });
  }

  // Add a helper to map country codes to flag emojis
  const countryFlags: { [key: string]: string } = {
    AF: 'ğŸ‡¦ğŸ‡«', AL: 'ğŸ‡¦ğŸ‡±', DZ: 'ğŸ‡©ğŸ‡¿', AS: 'ğŸ‡¦ğŸ‡¸', AD: 'ğŸ‡¦ğŸ‡©', AO: 'ğŸ‡¦ğŸ‡´', AI: 'ğŸ‡¦ğŸ‡®', AQ: 'ğŸ‡¦ğŸ‡¶', AG: 'ğŸ‡¦ğŸ‡¬', AR: 'ğŸ‡¦ğŸ‡·', AM: 'ğŸ‡¦ğŸ‡²', AW: 'ğŸ‡¦ğŸ‡¼', AU: 'ğŸ‡¦ğŸ‡º', AT: 'ğŸ‡¦ğŸ‡¹', AZ: 'ğŸ‡¦ğŸ‡¿', BS: 'ğŸ‡§ğŸ‡¸', BH: 'ğŸ‡§ğŸ‡­', BD: 'ğŸ‡§ğŸ‡©', BB: 'ğŸ‡§ğŸ‡§', BY: 'ğŸ‡§ğŸ‡¾', BE: 'ğŸ‡§ğŸ‡ª', BZ: 'ğŸ‡§ğŸ‡¿', BJ: 'ğŸ‡§ğŸ‡¯', BM: 'ğŸ‡§ğŸ‡²', BT: 'ğŸ‡§ğŸ‡¹', BO: 'ğŸ‡§ğŸ‡´', BQ: 'ğŸ‡§ğŸ‡¶', BA: 'ğŸ‡§ğŸ‡¦', BW: 'ğŸ‡§ğŸ‡¼', BV: 'ğŸ‡§ğŸ‡»', BR: 'ğŸ‡§ğŸ‡·', IO: 'ğŸ‡®ğŸ‡´', BN: 'ğŸ‡§ğŸ‡³', BG: 'ğŸ‡§ğŸ‡¬', BF: 'ğŸ‡§ğŸ‡«', BI: 'ğŸ‡§ğŸ‡®', CV: 'ğŸ‡¨ğŸ‡»', KH: 'ğŸ‡°ğŸ‡­', CM: 'ğŸ‡¨ğŸ‡²', CA: 'ğŸ‡¨ğŸ‡¦', KY: 'ğŸ‡°ğŸ‡¾', CF: 'ğŸ‡¨ğŸ‡«', TD: 'ğŸ‡¹ğŸ‡©', CL: 'ğŸ‡¨ğŸ‡±', CN: 'ğŸ‡¨ğŸ‡³', CX: 'ğŸ‡¨ğŸ‡½', CC: 'ğŸ‡¨ğŸ‡¨', CO: 'ğŸ‡¨ğŸ‡´', KM: 'ğŸ‡°ğŸ‡²', CG: 'ğŸ‡¨ğŸ‡¬', CD: 'ğŸ‡¨ğŸ‡©', CK: 'ğŸ‡¨ğŸ‡°', CR: 'ğŸ‡¨ğŸ‡·', CI: 'ğŸ‡¨ğŸ‡®', HR: 'ğŸ‡­ğŸ‡·', CU: 'ğŸ‡¨ğŸ‡º', CW: 'ğŸ‡¨ğŸ‡¼', CY: 'ğŸ‡¨ğŸ‡¾', CZ: 'ğŸ‡¨ğŸ‡¿', DK: 'ğŸ‡©ğŸ‡°', DJ: 'ğŸ‡©ğŸ‡¯', DM: 'ğŸ‡©ğŸ‡²', DO: 'ğŸ‡©ğŸ‡´', EC: 'ğŸ‡ªğŸ‡¨', EG: 'ğŸ‡ªğŸ‡¬', SV: 'ğŸ‡¸ğŸ‡»', GQ: 'ğŸ‡¬ğŸ‡¶', ER: 'ğŸ‡ªğŸ‡·', EE: 'ğŸ‡ªğŸ‡ª', SZ: 'ğŸ‡¸ğŸ‡¿', ET: 'ğŸ‡ªğŸ‡¹', FK: 'ğŸ‡«ğŸ‡°', FO: 'ğŸ‡«ğŸ‡´', FJ: 'ğŸ‡«ğŸ‡¯', FI: 'ğŸ‡«ğŸ‡®', FR: 'ğŸ‡«ğŸ‡·', GF: 'ğŸ‡¬ğŸ‡«', PF: 'ğŸ‡µğŸ‡«', TF: 'ğŸ‡¹ğŸ‡«', GA: 'ğŸ‡¬ğŸ‡¦', GM: 'ğŸ‡¬ğŸ‡²', GE: 'ğŸ‡¬ğŸ‡ª', DE: 'ğŸ‡©ğŸ‡ª', GH: 'ğŸ‡¬ğŸ‡­', GI: 'ğŸ‡¬ğŸ‡®', GR: 'ğŸ‡¬ğŸ‡·', GL: 'ğŸ‡¬ğŸ‡±', GD: 'ğŸ‡¬ğŸ‡©', GP: 'ğŸ‡¬ğŸ‡µ', GU: 'ğŸ‡¬ğŸ‡º', GT: 'ğŸ‡¬ğŸ‡¹', GG: 'ğŸ‡¬ğŸ‡¬', GN: 'ğŸ‡¬ğŸ‡³', GW: 'ğŸ‡¬ğŸ‡¼', GY: 'ğŸ‡¬ğŸ‡¾', HT: 'ğŸ‡­ğŸ‡¹', HM: 'ğŸ‡­ğŸ‡²', VA: 'ğŸ‡»ğŸ‡¦', HN: 'ğŸ‡­ğŸ‡³', HK: 'ğŸ‡­ğŸ‡°', HU: 'ğŸ‡­ğŸ‡º', IS: 'ğŸ‡®ğŸ‡¸', IN: 'ğŸ‡®ğŸ‡³', ID: 'ğŸ‡®ğŸ‡©', IR: 'ğŸ‡®ğŸ‡·', IQ: 'ğŸ‡®ğŸ‡¶', IE: 'ğŸ‡®ğŸ‡ª', IM: 'ğŸ‡®ğŸ‡²', IL: 'ğŸ‡®ğŸ‡±', IT: 'ğŸ‡®ğŸ‡¹', JM: 'ğŸ‡¯ğŸ‡²', JP: 'ğŸ‡¯ğŸ‡µ', JE: 'ğŸ‡¯ğŸ‡ª', JO: 'ğŸ‡¯ğŸ‡´', KZ: 'ğŸ‡°ğŸ‡¿', KE: 'ğŸ‡°ğŸ‡ª', KI: 'ğŸ‡°ğŸ‡®', KP: 'ğŸ‡°ğŸ‡µ', KR: 'ğŸ‡°ğŸ‡·', KW: 'ğŸ‡°ğŸ‡¼', KG: 'ğŸ‡°ğŸ‡¬', LA: 'ğŸ‡±ğŸ‡¦', LV: 'ğŸ‡±ğŸ‡»', LB: 'ğŸ‡±ğŸ‡§', LS: 'ğŸ‡±ğŸ‡¸', LR: 'ğŸ‡±ğŸ‡·', LY: 'ğŸ‡±ğŸ‡¾', LI: 'ğŸ‡±ğŸ‡®', LT: 'ğŸ‡±ğŸ‡¹', LU: 'ğŸ‡±ğŸ‡º', MO: 'ğŸ‡²ğŸ‡´', MG: 'ğŸ‡²ğŸ‡¬', MW: 'ğŸ‡²ğŸ‡¼', MY: 'ğŸ‡²ğŸ‡¾', MV: 'ğŸ‡²ğŸ‡»', ML: 'ğŸ‡²ğŸ‡±', MT: 'ğŸ‡²ğŸ‡¹', MH: 'ğŸ‡²ğŸ‡­', MQ: 'ğŸ‡²ğŸ‡¶', MR: 'ğŸ‡²ğŸ‡·', MU: 'ğŸ‡²ğŸ‡º', YT: 'ğŸ‡¾ğŸ‡¹', MX: 'ğŸ‡²ğŸ‡½', FM: 'ğŸ‡«ğŸ‡²', MD: 'ğŸ‡²ğŸ‡©', MC: 'ğŸ‡²ğŸ‡¨', MN: 'ğŸ‡²ğŸ‡³', ME: 'ğŸ‡²ğŸ‡ª', MS: 'ğŸ‡²ğŸ‡¸', MA: 'ğŸ‡²ğŸ‡¦', MZ: 'ğŸ‡²ğŸ‡¿', MM: 'ğŸ‡²ğŸ‡²', NA: 'ğŸ‡³ğŸ‡¦', NR: 'ğŸ‡³ğŸ‡·', NP: 'ğŸ‡³ğŸ‡µ', NL: 'ğŸ‡³ğŸ‡±', NC: 'ğŸ‡³ğŸ‡¨', NZ: 'ğŸ‡³ğŸ‡¿', NI: 'ğŸ‡³ğŸ‡®', NE: 'ğŸ‡³ğŸ‡ª', NG: 'ğŸ‡³ğŸ‡¬', NU: 'ğŸ‡³ğŸ‡º', NF: 'ğŸ‡³ğŸ‡«', MK: 'ğŸ‡²ğŸ‡°', MP: 'ğŸ‡²ğŸ‡µ', NO: 'ğŸ‡³ğŸ‡´', OM: 'ğŸ‡´ğŸ‡²', PK: 'ğŸ‡µğŸ‡°', PW: 'ğŸ‡µğŸ‡¼', PS: 'ğŸ‡µğŸ‡¸', PA: 'ğŸ‡µğŸ‡¦', PG: 'ğŸ‡µğŸ‡¬', PY: 'ğŸ‡µğŸ‡¾', PE: 'ğŸ‡µğŸ‡ª', PH: 'ğŸ‡µğŸ‡­', PN: 'ğŸ‡µğŸ‡³', PL: 'ğŸ‡µğŸ‡±', PT: 'ğŸ‡µğŸ‡¹', PR: 'ğŸ‡µğŸ‡·', QA: 'ğŸ‡¶ğŸ‡¦', RE: 'ğŸ‡·ğŸ‡ª', RO: 'ğŸ‡·ğŸ‡´', RU: 'ğŸ‡·ğŸ‡º', RW: 'ğŸ‡·ğŸ‡¼', BL: 'ğŸ‡§ğŸ‡±', SH: 'ğŸ‡¸ğŸ‡­', KN: 'ğŸ‡°ğŸ‡³', LC: 'ğŸ‡±ğŸ‡¨', MF: 'ğŸ‡²ğŸ‡«', PM: 'ğŸ‡µğŸ‡²', VC: 'ğŸ‡»ğŸ‡¨', WS: 'ğŸ‡¼ğŸ‡¸', SM: 'ğŸ‡¸ğŸ‡²', ST: 'ğŸ‡¸ğŸ‡¹', SA: 'ğŸ‡¸ğŸ‡¦', SN: 'ğŸ‡¸ğŸ‡³', RS: 'ğŸ‡·ğŸ‡¸', SC: 'ğŸ‡¸ğŸ‡¨', SL: 'ğŸ‡¸ğŸ‡±', SG: 'ğŸ‡¸ğŸ‡¬', SX: 'ğŸ‡¸ğŸ‡½', SK: 'ğŸ‡¸ğŸ‡°', SI: 'ğŸ‡¸ğŸ‡®', SB: 'ğŸ‡¸ğŸ‡§', SO: 'ğŸ‡¸ğŸ‡´', ZA: 'ğŸ‡¿ğŸ‡¦', GS: 'ğŸ‡¬ğŸ‡¸', SS: 'ğŸ‡¸ğŸ‡¸', ES: 'ğŸ‡ªğŸ‡¸', LK: 'ğŸ‡±ğŸ‡°', SD: 'ğŸ‡¸ğŸ‡©', SR: 'ğŸ‡¸ğŸ‡·', SJ: 'ğŸ‡¸ğŸ‡¯', SE: 'ğŸ‡¸ğŸ‡ª', CH: 'ğŸ‡¨ğŸ‡­', SY: 'ğŸ‡¸ğŸ‡¾', TW: 'ğŸ‡¹ğŸ‡¼', TJ: 'ğŸ‡¹ğŸ‡¯', TZ: 'ğŸ‡¹ğŸ‡¿', TH: 'ğŸ‡¹ğŸ‡­', TL: 'ğŸ‡¹ğŸ‡±', TG: 'ğŸ‡¹ğŸ‡¬', TK: 'ğŸ‡¹ğŸ‡°', TO: 'ğŸ‡¹ğŸ‡´', TT: 'ğŸ‡¹ğŸ‡¹', TN: 'ğŸ‡¹ğŸ‡³', TR: 'ğŸ‡¹ğŸ‡·', TM: 'ğŸ‡¹ğŸ‡²', TC: 'ğŸ‡¹ğŸ‡¨', TV: 'ğŸ‡¹ğŸ‡»', UG: 'ğŸ‡ºğŸ‡¬', UA: 'ğŸ‡ºğŸ‡¦', AE: 'ğŸ‡¦ğŸ‡ª', GB: 'ğŸ‡¬ğŸ‡§', US: 'ğŸ‡ºğŸ‡¸', UM: 'ğŸ‡ºğŸ‡²', UY: 'ğŸ‡ºğŸ‡¾', UZ: 'ğŸ‡ºğŸ‡¿', VU: 'ğŸ‡»ğŸ‡º', VE: 'ğŸ‡»ğŸ‡ª', VN: 'ğŸ‡»ğŸ‡³', VG: 'ğŸ‡»ğŸ‡¬', VI: 'ğŸ‡»ğŸ‡®', WF: 'ğŸ‡¼ğŸ‡«', EH: 'ğŸ‡ªğŸ‡­', YE: 'ğŸ‡¾ğŸ‡ª', ZM: 'ğŸ‡¿ğŸ‡²', ZW: 'ğŸ‡¿ğŸ‡¼' };

  function getFlag(code: string | undefined) {
    return code ? (countryFlags[code] || '') : '';
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
      <NavBar />
      <main className="md:ml-64 flex flex-col items-center justify-center min-h-screen p-8">
        <div className="w-full max-w-xl mx-auto bg-white rounded-3xl shadow-xl p-8 flex flex-col items-center gap-8">
          {!user && <div className="text-xl text-blue-600">Loading user...</div>}
          {!quizStarted && !showLeaderboard && (
            <>
              <h2 className="text-3xl font-extrabold text-blue-700 mb-4">Multiplayer Quiz</h2>
              <div className="w-full mb-4 p-4 bg-blue-50 rounded-xl text-blue-700 font-semibold text-center">
                Your score will be recorded live to the leaderboard!
              </div>
              <button
                onClick={() => setQuizStarted(true)}
                className="bg-green-600 text-white px-8 py-3 rounded-full font-bold text-lg shadow hover:bg-green-700 transition"
              >
                Start Quiz
              </button>
              <button
                onClick={fetchLeaderboard}
                className="mt-4 bg-blue-100 text-blue-700 px-6 py-2 rounded-full font-semibold hover:bg-blue-200 transition"
              >
                View Leaderboard
              </button>
            </>
          )}
          {quizStarted && !showLeaderboard && (
            <MultiplayerGame userId={user ? user.id : "local-user"} onGameEnd={handleGameEnd} />
          )}
          {showLeaderboard && (
            <div className="w-full mt-8">
              <h2 className="text-2xl font-bold text-blue-700 mb-4 text-center">Live Leaderboard Top 10</h2>
              <div className="overflow-x-auto rounded-2xl shadow-xl bg-gradient-to-br from-white to-blue-50 border border-blue-100">
                <table className="min-w-full text-left text-black rounded-2xl overflow-hidden">
                  <thead className="bg-blue-100 text-blue-700">
                    <tr>
                      <th className="py-3 px-4 text-base font-bold">#</th>
                      <th className="py-3 px-4 text-base font-bold">Player</th>
                      <th className="py-3 px-4 text-base font-bold">Score</th>
                      <th className="py-3 px-4 text-base font-bold">Date & Time</th>
                    </tr>
                  </thead>
                  <tbody>
                    {leaderboard.map((entry, idx) => (
                      <tr
                        key={idx}
                        className={
                          `${idx % 2 === 0 ? 'bg-white' : 'bg-blue-50'} ` +
                          `${idx === 0 ? 'font-bold text-yellow-600' : idx === 1 ? 'font-bold text-gray-500' : idx === 2 ? 'font-bold text-orange-500' : ''}`
                        }
                      >
                        <td className="py-3 px-4 text-xl text-center">
                          {idx === 0 ? 'ğŸ¥‡' : idx === 1 ? 'ğŸ¥ˆ' : idx === 2 ? 'ğŸ¥‰' : idx + 1}
                        </td>
                        <td className="py-3 px-4">{entry.countrycode ? getFlag(entry.countrycode) : ''} {entry.name}</td>
                        <td className="py-3 px-4 font-mono">{entry.score}</td>
                        <td className="py-3 px-4 font-mono">{formatDateTime(entry.created_at)}</td>
                      </tr>
                    ))}
                    {userScore && (
                      <>
                        <tr><td colSpan={4} className="py-2 text-center text-gray-400 bg-transparent">...</td></tr>
                        <tr className="font-bold text-green-700 bg-green-50">
                          <td className="py-3 px-4 text-center">{userScore.rank || 'â€”'}</td>
                          <td className="py-3 px-4">{userScore.countrycode ? getFlag(userScore.countrycode) : ''} {userScore.name} (You)</td>
                          <td className="py-3 px-4 font-mono">{userScore.score}</td>
                          <td className="py-3 px-4 font-mono">{formatDateTime(userScore.created_at)}</td>
                        </tr>
                      </>
                    )}
                  </tbody>
                </table>
              </div>
              <div className="flex flex-col md:flex-row gap-4 mt-6">
                <button
                  onClick={() => setShowLeaderboard(false)}
                  className="bg-gray-100 text-gray-700 px-6 py-2 rounded-full font-semibold hover:bg-gray-200 transition w-full md:w-auto"
                >
                  Close Leaderboard
                </button>
                <button
                  onClick={handleImproveScore}
                  className="bg-green-100 text-green-700 px-6 py-2 rounded-full font-semibold hover:bg-green-200 transition w-full md:w-auto"
                >
                  Improve My Score
                </button>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
